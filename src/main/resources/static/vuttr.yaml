openapi: 3.0.1
info:
  title: VUTTR | Challenge Completed
  version: v1.0.0
servers:
  - url: http://localhost:8081
    description: Server for VUTTR Challenge completion
tags:
  - name: Outils
    description: Les outils sont utiles et il est important de s'en souvenir


paths:
  /api/tools/:
    get:
      tags:
        - Outils
      operationId: getAll
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tool'
    post:
      tags:
        - Outils
      operationId: addTool
      summary: adds a new Tool
      description: with the correct JSON, you can store a new tool in our DB
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tool'
          application/xml:
            schema:
              $ref: '#/components/schemas/Tool'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tool'
        description: JSON Object that represents the tool to be added
        required: true
      responses:
        '200':
          description: Tool created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tool'
        '400':
          description: Invalid ID supplied
        '404':
          description: Tool not found
        '405':
          description: Validation exception
      security:
        - bearerAuth: []
  /api/tools/{id}:
    get:
      tags:
        - Outils
      summary: Get tool by id
      description: the API gives you a tool according to the supplied ID
      operationId: get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
        '400':
          description: Invalid ID supplied
        '404':
          description: Tool not found
        '405':
          description: Validation exception
    put:
      tags:
        - Outils
      operationId: editTool
      summary: edit an existing Tool
      description: Manchmal wir brauch es, ein Werkzeug zu bearbeiten, mit dieses Methode kannst du es einfach schaffen!
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tool'
        required: true
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
        '400':
          description: Invalid ID supplied
        '404':
          description: Tool not found
        '405':
          description: Validation exception
      security:
        - bearerAuth: []
    delete:
      tags:
        - Outils
      operationId: delete
      summary: Entfernen Sie eine Werkzeug
      description: Mit dieses Methode konnen Sie ein spezifisch Werkzeug entfernen
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: TOOL DELETED
          content:
            '*/*':
              schema:
                type: string
                enum:
                  - 204 NO_CONTENT
        "400":
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Tool not Found
        '405':
          description: Validation exception
      security:
        - bearerAuth: []

  /auth/register:
    post:
      tags:
        - auth-controller
      operationId: registerUser
      summary: Register new user
      description: Create a new user in our system with given email, username and password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDTO'
        required: true
      responses:
        "200":
          description: USER REGISTERED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: INVALID PARAMETERS

  /auth/login:
    post:
      tags:
        - auth-controller
      operationId: loginUser
      summary: Log In according to credentials
      description: Log an existing user in our system and gives him his token for future requests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        "400":
          description: INVALID PARAMETERS
    get:
      tags:
        - auth-controller
      operationId: getCurrentUser
      summary: gets the current User that is logged
      description: return Logged User

      responses:
        "200":
          description: loggedUser
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
      security:
        - bearerAuth: []
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: jDAIdo382932hewqj
        username:
          type: string
          example: manu21
        email:
          type: string
          example: manu21@fake.com
        password:
          type: string
          example: asd123
        role:
          $ref: '#/components/schemas/UserRole'
    Tool:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: Google Maps
        link:
          type: string
          example: https://www.google.com/maps
        description:
          type: string
          example: don't get lost with maps!
        tags:
          type: array
          items:
            type: string
          example:
            [route, maps, location, places]
    UserRole:
      type: string
      description: user's role determines how the user can interact with the API
      enum:
        - ADMIN
        - USER
      default: USER
    RegisterDTO:
      type: object
      properties:
        username:
          type: string
          example: manu21
        email:
          type: string
          example: manu21@fake.com
        password:
          type: string
          example: asd123
        role:
          $ref: '#/components/schemas/UserRole'
    AuthDTO:
      type: object
      properties:
        login:
          description: The login can be the username or email of the user
          type: string
          example: manu21
        password:
          type: string
          example: asd123
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: sampletoken
          description: with this token the user is authorized to make future requests
        user:
          $ref: '#/components/schemas/User'
    ApiError:
      type: object
      properties:
        code:
          type: string
          example: X error code
        message:
          type: string
          example: X error message
  requestBodies:
    Tool:
      description: Tool object that needs to be added to the database
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Tool'
        application/xml:
          schema:
            $ref: '#/components/schemas/Tool'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

